import mongoose from 'mongoose';
import dotenv from 'dotenv';
import { CustomerOrder } from '../src/models/CustomerOrder';

dotenv.config();

// –°—Ö–µ–º–∞ –¥–ª—è –∞—Ä—Ö–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
const CustomerOrderArchiveSchema = new mongoose.Schema({
  id: { type: String, required: true, unique: true },
  paymentDate: { type: String, required: true },
  customerId: { type: String, required: true },
  customerName: { type: String, required: true },
  address: { type: String, required: true },
  deliveryCost: { type: Number, required: true },
  productName: { type: String, required: true },
  quantity: { type: Number, required: true },
  price: { type: Number, required: true },
  status: { type: String, required: true },
  archivedAt: { type: Date, default: Date.now }
});

const CustomerOrderArchive = mongoose.model('CustomerOrderArchive', CustomerOrderArchiveSchema);

async function optimizeDatabase() {
  try {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/telesite-analytics');
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // 1. –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è customerorders...');
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏–Ω–¥–µ–∫—Å—ã (–∫—Ä–æ–º–µ _id)
    const indexes = await CustomerOrder.collection.getIndexes();
    for (const indexName in indexes) {
      if (indexName !== '_id_') {
        await CustomerOrder.collection.dropIndex(indexName);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã
    await CustomerOrder.collection.createIndex({ paymentDate: -1 }, { background: true });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ paymentDate —Å–æ–∑–¥–∞–Ω');
    
    await CustomerOrder.collection.createIndex({ status: 1, paymentDate: -1 }, { background: true });
    console.log('‚úÖ –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å status + paymentDate —Å–æ–∑–¥–∞–Ω');
    
    await CustomerOrder.collection.createIndex({ customerId: 1 }, { background: true });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å –ø–æ customerId —Å–æ–∑–¥–∞–Ω');
    
    await CustomerOrder.collection.createIndex({ id: 1 }, { unique: true, background: true });
    console.log('‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –ø–æ id —Å–æ–∑–¥–∞–Ω');
    
    // –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞
    await CustomerOrder.collection.createIndex(
      { customerName: "text", address: "text", productName: "text" },
      { background: true }
    );
    console.log('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω');

    // 2. –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞—Ä—Ö–∏–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞...');
    
    await CustomerOrderArchive.collection.createIndex({ paymentDate: -1 }, { background: true });
    await CustomerOrderArchive.collection.createIndex({ id: 1 }, { unique: true, background: true });
    await CustomerOrderArchive.collection.createIndex({ archivedAt: 1 }, { background: true });
    console.log('‚úÖ –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –∞—Ä—Ö–∏–≤–∞ —Å–æ–∑–¥–∞–Ω—ã');

    // 3. –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã (—Å—Ç–∞—Ä—à–µ 6 –º–µ—Å—è—Ü–µ–≤)
    console.log('\nüì¶ –ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤...');
    
    const sixMonthsAgo = new Date();
    sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);
    const sixMonthsAgoStr = sixMonthsAgo.toLocaleDateString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric'
    }).split('.').reverse().join('.');

    // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞—Ä—ã–µ –∑–∞–∫–∞–∑—ã
    const oldOrders = await CustomerOrder.find({
      paymentDate: { $lt: sixMonthsAgoStr }
    });

    if (oldOrders.length > 0) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ archivedAt –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
      const ordersToArchive = oldOrders.map(order => ({
        ...order.toObject(),
        archivedAt: new Date()
      }));

      await CustomerOrderArchive.insertMany(ordersToArchive);
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const deleteResult = await CustomerOrder.deleteMany({
        paymentDate: { $lt: sixMonthsAgoStr }
      });

      console.log(`‚úÖ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ ${oldOrders.length} –∑–∞–∫–∞–∑–æ–≤`);
      console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${deleteResult.deletedCount}`);
    } else {
      console.log('‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏');
    }

    // 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:');
    
    const activeOrdersCount = await CustomerOrder.countDocuments();
    const archivedOrdersCount = await CustomerOrderArchive.countDocuments();
    
    console.log(`üìå –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${activeOrdersCount}`);
    console.log(`üì¶ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã: ${archivedOrdersCount}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${activeOrdersCount + archivedOrdersCount}`);

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    console.log('\n‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
    
    const startTime = Date.now();
    const testQuery = await CustomerOrder.find({ status: 'processing' })
      .sort({ paymentDate: -1 })
      .limit(20)
      .explain('executionStats');
    
    const endTime = Date.now();
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ ${endTime - startTime}–º—Å`);

    console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
  } finally {
    await mongoose.disconnect();
    console.log('üëã –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
optimizeDatabase(); 